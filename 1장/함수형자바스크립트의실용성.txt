1.2.1 회원 목록 중 여러명 찾기
    코드1-5. for문으로 필터링하기
1.2.2 for문에서 filter로, if에서 predicate로
    코드1-6. filter
    코드1-7. filter사용
1.2.3 함수형 프로그래밍 관점으로 filter보기
    filter 함수에는 for도 있고 if도 있지만, filter 함수는 항상 동일하게 동작하는 함수이다.
    한 가지 로직을 가졌다는 뜻이다. 동일한 인자가 들어오면 항상 동일하게 동작한다.
    filter 함수의 로직은 외부나 내부의 어떤 상태 변화에도 의존하지 않는다.
    > 절차지향 프로그래밍에서는 위에서 아래로 내려가면서 특정 변수의 값을 변경해 나가는 식으로 로직을 만든다.
    > 객체지향 프로그래밍에서는 객체들을 만들어 놓고 객체들 간의 협업을 통해 로직을 만든다.
      이벤트 등으로 서로를 연결한후 상태의 변화를 감지하여 스스로 자신이 가진 값을 변경하거나, 상대의 메서드를 직접 실행하여
      상태를 변경하는 식으로 프로그래밍을 한다.
    > 함수형 프로그래밍에서는 '항상 동일하게 동작하는 함수'를 만들고 보조 함수를 조합하는 식으로 로직을 완성한다.
      내부에서 관리하고 있는 상태를 따로 두지 않고 넘겨진 인자에만 의존한다. 동일한 인자가 들어오면 항상 동일한 값을 리턴하도록 한다.
      보조 함수 역시 인자이며, 보조 함수에서도 상태를 변경하지 않으면 보조 함수를 받은 함수는 항상 동일한 결과를 만드는 함수가 된다.
1.2.4 map 함수
1.2.5 실행 결과로 바로 실행하기
    함수의 리턴값을 바로 다른 함수의 인자로 사용하면 변수 할당을 줄일 수 있다. filter 함수의 결과가 배열이므로 map의 첫번째 인자로
    바로 사용 가능하다.
    코드 1-10. 함수 중첩
    코드 1-11. 함수 중첩2
    코드 1-12. filter, map
1.2.6 함수를 값으로 다룬 예제의 실용성
    1.1절에서 소개했던 addMaker와 비슷한 패턴의 함수가 실제로도 많이 사용된다. addMaker와 비슷한 패턴의 함수인 bvalue 함수를 만들면
    코드 1-12의 코드를 더 줄일 수 있다.
    코드 1-13. 함수를리턴하는 함수 bvalue
    코드 1-14. bvalue로 map의 iteratee 만들기
    코드 1-15. 화살표 함수와 함께 사용하기
1.3 함수형 자바스크립트의 실용성 2
1.3.1 회원 목록 중 한 명 찾기
    코드 1-16. filter로 한 명 찾기
    코드 1-17. break문
    코드 1-18. findById
    코드 1-19. findByName
    코드 1-20. findByAge
    코드 1-21. findBy
    코드 1-22. findBy로 안되는 경우
1.3.2 값에서 함수로
    코드 1-23. find
    코드 1-24. 다형성